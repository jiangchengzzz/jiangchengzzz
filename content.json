[{"title":"react学习-webpack搭建（三）","date":"2018-07-07T09:24:38.000Z","path":"20180707/react-learn-3/","text":"添加babelES6 转ES5模块 首先肯定是引入 npm install babel-loader babel-core babel-preset-env webpack –save-dev 如果要支持react，需要安装下面的模块： npm install babel-preset-es2015 babel-preset-react babel-preset-stage-3 –save-dev webpack.config.js 的rule中添加代码： { test:/\\.jsx$/, exclude:/(node_modules|bower_components)/,//排除XXX类型文件 use:{ loader:&apos;babel-loader&apos; } } 根目录下创建.babelrc文件添加如下代码： { “presets”: [“es2015”,”react”]} 添加url和file模块 引入 npm install url-loader file-loader –save-dev webpack.config.js 的rule中添加 最基本的搭建已经完成了，下面是高级篇。 webpack4.x移除了之前必要的UglifyjsWebpackPlugin压缩，所以现在不需要添加相关配置。只需要在package.json中的script中添加： “build”: “webpack –mode development”以后就可以用npm run build进行压缩了。 devtool webpack 提供的辅助工具，调试的时候能正确的显示源代码出错的行数。eval-soure-map用于开发模式下,其他模式 devtool:’eval-soure-map’ happypack 让loader多进程去处理文件，加速webpack构建 npm install happypack –save-dev在webpack.config.js三个部位中添加： eslint 普通规则可以，但是airbnb 我报错了后期补上。 dll 不好意思，我报错了后期补上。 然后是加入react组件 先用node.js安装react 和react-dom 模块: npm install react react-dom –save添加react代码： 最后 总结： 其实很重要的eslint和dll没成功有点烦，特别是dll 不知道为什么试了那么多帖子上的方法都失败， 嗯，下次有时间在来补；","tags":[{"name":"react","slug":"react","permalink":"https://jiangchengzzz.github.io/tags/react/"},{"name":"webpack","slug":"webpack","permalink":"https://jiangchengzzz.github.io/tags/webpack/"}]},{"title":"vue路由跳转用router-link的好处","date":"2018-07-07T06:11:46.000Z","path":"20180707/router-link/","text":"具体情况 在用vue的时候写了个头部组件， 在index.vue中引入， 需要对不同角色做权限控制， 直接写点击事件来进行跳转，条件判断类名的形式。显示状态 出现的问题 浏览器刷新时候，选中状态不显示， 想了有几种方案： 用vuex去存当前跳转的路由，通过在组件循环获取 同上用stroage去存 但是感觉都太繁琐，后来发现如果路由跳转用router-link，vue-router会帮你把路由与router-link绑定，你只需要去设置当路由adtive时候所需要增加的class就好还可以吧router-link指定为其他标签例如： 文档：详情请看https://router.vuejs.org/zh/api/#linkactiveclass 解决的问题，以及好处 用了router-link标签后发现： 不论是手输路由，还是刷新页面，路由选中状态都不会消失。 简化了之前自己添加类名触发点击事件中的各种循环，以及自己添加的各种字段。 感觉自己变帅了。","tags":[{"name":"vue-router","slug":"vue-router","permalink":"https://jiangchengzzz.github.io/tags/vue-router/"},{"name":"vue","slug":"vue","permalink":"https://jiangchengzzz.github.io/tags/vue/"}]},{"title":"react学习-webpack搭建（二）","date":"2018-07-05T02:28:27.000Z","path":"20180705/react-learn-2/","text":"配置升级篇 引入自动生成html的插件： 安装 npm install html-webpack-plugin –save-dev 配置webpack.config.js,引入模块，并在module.exports 设置plugins对象值 webpack引入node.js的express服务器来支持热更新。 安装 npm install webpack-dev-server –save-dev 可以直接在webpack.config里面配置,首先要在package.json内配置 “scripts”:{ &quot;start&quot;:&quot;webpack-dev-server --inline --hot&quot; } // 嗯，就是脚手架那种npm start启动 然后webpack.config.js 里面的配置： 新建一个webpack.server.js,package.json内配置,指定对应文件 “scripts”: { “start”:”node server.js” }, 然后webpack.server.js 里面的配置： 嗯，现在是各种文件的支持。 webpack是基于nodeJS平台，完全支持JS文件不支持css。所以要把css转成JS文件。webpack提供了一个两个模块来支持css文件转编译。 1234style-loader:将css内容插入到html的style css-loader:处理css里面的@import 和url() 的内容，需要url-loader 和file-loader的支撑 file-loader: 用MD5 hash加密文件名后返回相应的路径 url-loader 在file-loader 基础上加了额外的功能。当链接的文件小于limit 8192时，可以直接返回DataURL。DataURL是图片格式转换成base64编码的字符串，并存储在URL中。这样可以减少客户端的请求次数 安装 npm install css-loader style-loader –save-dev npm install url-loader file-loader –save-dev 修改webpack.config.js 的配置 肯定实在src下面创建各种文件夹和文件了，以及app.js导入文件了，以下是我的：（包括后面用的sass和less，这边不需要）,嗯，还有里面随便写的样式。app.js 目录css，scss，less。 然后就是npm start了，去浏览器进你配的localhost:XXXX； 现在到了打包剥离css文件环节，css文件和html混合，这不符合html的优化思路。 所以要求webpack生成的最终文件css也是单独一个文件。这里webpack提供了 extract-text-webpack-plugin插件 安装 npm install extract-text-webpack-plugin –save-dev 修改webpack.config.js还有webpack.config.js顶部引入的文件，截图截不下额。 const ExtractTextPlugin = require(‘extract-text-webpack-plugin’) 停掉服务器，然后webpack打包就可以看到build文件夹里有style.css了。 是不是很开心!因为报错了，如果你的webpack版本是4.0以上 Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead extract-text-webpack-plugin还不能支持webpack4.0.0以上的版本 This is 官方给的说法 解决方法npm install –save-dev extract-text-webpack-plugin@next 会下载到extract-text-webpack-plugin@4.0.0-beta.0 但是不知道为什么我下下来了也可以用，但是没有显示在package。 自己折腾时候还遇到了Cannot find module ‘import-local’这种错，然后在这个文件夹下webpack -v 都会报这个错，实在没办法最后只能删除这个node_modules然后删除package.json中所有关于webpack的，然后重新安装。。。。然后就好了，尴尬。 现在就是在项目中用sass和less 嗯，要安装的东西 npm install sass-loader node-sass webpack –save-devnpm install less-loader less –save-devnpm i -D postcss-loader 在根目录上创建postcss.config.js（webpack 会自动找到这个文件):里面写 module.exports = {plugins:{‘autoprefixer’: {},} webpack.config.js 里面配置: 搞定了嗯，是的有点丑。}","tags":[{"name":"react","slug":"react","permalink":"https://jiangchengzzz.github.io/tags/react/"},{"name":"webpack","slug":"webpack","permalink":"https://jiangchengzzz.github.io/tags/webpack/"}]},{"title":"react学习-webpack搭建（一）","date":"2018-07-04T06:19:44.000Z","path":"20180704/react-learn-1/","text":"初衷 嗯，最近工作内容比较少，是时候补充下自己了，纠结了一天该学什么， react、node、nginx、typescript，竟然有这么多。 反正都有这么多，就先从react开始吧！ 准备我选择的是用webpack进行搭建环境，然后发现自己搭建webpack基本忘完。嗯所以第一篇就重新学一遍webpack搭建。 webpack搭建初级： 首先肯定是全局安装webpack npm install webpack -g 然后就是建项目文件夹，打开命令行（目录下shift+右键）或者gitbash。 npm init 再后那就是在这个根目录下创建个webpack.config.js文件以及基本项目目录,下面是我的目录以及配置信息。 src文件夹下面建app.js,随便写点什么例如：alert(‘你好萌啊’);，src下再创建一个index.html引入bundle.js文件。（还未生成，后面会生成只是先写 安装本地webpack包 npm install webpack –save-dev//功后显示Hash: bba9fbe70c8f6bbe2cd1Version: webpack 3.3.0Time: 47ms Asset Size Chunks Chunk Namesbundle.js 2.58 kB 0 [emitted] main[0] ./src/app.js 111 bytes {0} [built] 访问index.html 就能看到app.js里面写的东西了。","tags":[{"name":"react","slug":"react","permalink":"https://jiangchengzzz.github.io/tags/react/"},{"name":"webpack","slug":"webpack","permalink":"https://jiangchengzzz.github.io/tags/webpack/"}]},{"title":"Hello World","date":"2018-07-03T02:28:45.212Z","path":"20180703/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"第一篇博文，联系markdowm，写下博客搭建过程。","date":"2018-07-02T09:32:42.000Z","path":"20180702/first-blog-construct/","text":"初衷嗯，学的东西都忘完了，准备记录一下，早就想搭了啊，嗯，记性不好人还懒。 准备其实早就开始准备了，因为找模板都比较丑，主要因为懒，就拖到现在 过程有点蠢 第一阶段 node.js+git环境 建好github博客 绑定域名（没钱买，所以没绑） 第二阶段 安装hexo 1$ npm install -g hexo 初始化，建个文件夹，进入执行 1$ hexo init 初次生成 12$ hexo g #生成$ hexo s #启动服务 按照命令行提示浏览器进入localhost:4000 1有些4000端口会被占用,就要杀掉占用中（百度一下，你就知道）的或者修改端口 server: port: 4112 compress: true header: true 第三阶段 修改主题官方主题， 或github上面搜呗hexo themes 大把 修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成（若出现看不懂的问题执行hexo clean再生成） 第四阶段 上传so easy 直接执行hexo d123456789当然会有问题啦: 要在_config.yml中p配置deployb部分 deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master还是有问题： 要安装一个插件: npm install hexo-deployer-git --save 常用命令 1234567891011121314151617hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本一些缩写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令:hexo s -g #生成并本地预览hexo d -g #生成并上传 感受不够熟练写的超级慢啊，找模板有点蒙蔽，一个比一个丑。 补嗯昨天弄完发现文章分类，标签预览啥都有，就是不能看全文，曰了狗。 12搞了一个多小时都搞不定，最后用了最简单暴力的方式，重装，so easy！","tags":[{"name":"杂记","slug":"杂记","permalink":"https://jiangchengzzz.github.io/tags/杂记/"}]}]